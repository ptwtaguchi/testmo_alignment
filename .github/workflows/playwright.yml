name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60

    strategy:
      matrix:
        browser: [chromium]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Ensure browsers are installed
      run: python -m playwright install --with-deps

    - name: Install Testmo CLI tool locally (then use npx testmo .. to run it)
      run: npm install --no-save @testmo/testmo-cli

    - name: Run your tests
      run: |
        mkdir -p test-results
        pytest --browser ${{ matrix.browser }} --junitxml=test-results/${{ matrix.os }}_${{ matrix.browser }}_results.xml --tracing=retain-on-failure 
        if [ ! -f test-results/${{ matrix.os }}_${{ matrix.browser }}_results.xml ]; then
          echo "Test results file not found!"
          exit 1
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.os }}_${{ matrix.browser }}_test-results
        path: test-results/${{ matrix.os }}_${{ matrix.browser }}_results.xml

    - name: Upload Playwright traces
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.os }}_${{ matrix.browser }}_playwright-traces
        path: test-results/

    - name: report results to Testmo (Linux and macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        npx testmo automation:run:submit \
          --instance "$TESTMO_URL" \
          --project-id 1 \
          --name CICD-${{ matrix.os }}_${{ matrix.browser }} \
          --source "functiontest" \
          --results test-results/*.xml
      env:
        TESTMO_URL: ${{ secrets.TESTMO_URL }}
        TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

    - name: report results to Testmo (Windows)
      if: runner.os == 'Windows'
      run: |
        npx testmo automation:run:submit \
          --instance "$TESTMO_URL" \
          --project-id 1 \
          --name CICD-${{ matrix.os }}_${{ matrix.browser }} \
          --source "functiontest" \
          --results test-results/*.xml
      shell: pwsh
      env:
        TESTMO_URL: ${{ secrets.TESTMO_URL }}
        TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
